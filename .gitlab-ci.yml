stages:
  - security_dast
  - security_sast
  - build
  - test
  - deploy

variables:
  MAVEN_CLI_OPTS: "-B -DskipTests=true"
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_TLS_CERTDIR: ""

services:
  - docker:dind

before_script:
  - apk add --no-cache maven docker-compose

image: maven:3.9.5-eclipse-temurin-21-alpine

# DAST Stage
dast:
  stage: security_dast
  script:
    - docker-compose -f docker-compose.dast.yml up -d --wait
  after_script:
    - docker-compose -f docker-compose.dast.yml down -v

  artifacts:
    paths:
      - zap-reports/zap-report-order.html
      - zap-reports/zap-report-stock.html
  only:
    - main

# SAST Analysis Stage
sast:
  stage: security_sast
  script:
    # Run Sonar analysis for order-service with updated project key
    - |
      cd order-service && \
      mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
        -Dsonar.projectKey=gitlab-1_gitlab \
        -Dsonar.host.url=$SONAR_HOST_URL \
        -Dsonar.login=$SONAR_TOKEN
    # Run Sonar analysis for stock-service with updated project key
    - |
      cd ../stock-service && \
      mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
        -Dsonar.projectKey=gitlab-1_gitlab \
        -Dsonar.host.url=$SONAR_HOST_URL \
        -Dsonar.login=$SONAR_TOKEN
  only:
    - main

# Build Stage
build:
  stage: build
  script:
    - mvn -f order-service/pom.xml clean package -DskipTests
    - mvn -f stock-service/pom.xml clean package -DskipTests
    - docker build -t $CI_REGISTRY_IMAGE/order-service:latest -f ./order-service/Dockerfile ./order-service
    - docker build -t $CI_REGISTRY_IMAGE/stock-service:latest -f ./stock-service/Dockerfile ./stock-service
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/order-service:latest
    - docker push $CI_REGISTRY_IMAGE/stock-service:latest
  only:
    - main


# Test Stage
test:
  stage: test
  script:
    - docker-compose -f docker-compose.test.yml up -d
    - mvn -f order-service/pom.xml test
    - mvn -f stock-service/pom.xml test
  after_script:
    - docker-compose -f docker-compose.test.yml down -v
  only:
    - main

# Deploy Stage
deploy:
  stage: deploy
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/order-service:latest
    - docker pull $CI_REGISTRY_IMAGE/stock-service:latest
    - docker images # Verify images are pulled successfully
    - docker push $CI_REGISTRY_IMAGE/order-service:latest
    - docker push $CI_REGISTRY_IMAGE/stock-service:latest
    - docker-compose -f docker-compose.yml up -d
  only:
    - main

