name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  MAVEN_CLI_OPTS: "-B -DskipTests=true"
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_TLS_CERTDIR: ""
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  CI_REGISTRY: ghcr.io
  CI_REGISTRY_USER: ${{ secrets.GITHUB_ACTOR }}
  CI_REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # Security - DAST
  security_dast:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start DAST containers
        run: docker-compose -f docker-compose.dast.yml up -d

      - name: Stop DAST containers
        if: always()
        run: docker-compose -f docker-compose.dast.yml down -v

  # Security - SAST
  security_sast:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run SonarQube scan (Order Service)
        run: |
          cd order-service
          mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=github-ci \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.login=${{ env.SONAR_TOKEN }}

      - name: Run SonarQube scan (Stock Service)
        run: |
          cd stock-service
          mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=github-ci \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.login=${{ env.SONAR_TOKEN }}

  # Build
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Order Service
        run: mvn -f order-service/pom.xml clean package -DskipTests

      - name: Build Stock Service
        run: mvn -f stock-service/pom.xml clean package -DskipTests

      - name: Log in to GitHub Container Registry
        run: echo "${{ env.CI_REGISTRY_PASSWORD }}" | docker login ghcr.io -u "${{ env.CI_REGISTRY_USER }}" --password-stdin

      - name: Build & Push Docker Images
        run: |
          docker build -t ghcr.io/${{ github.repository }}/order-service:latest -f ./order-service/Dockerfile ./order-service
          docker build -t ghcr.io/${{ github.repository }}/stock-service:latest -f ./stock-service/Dockerfile ./stock-service
          docker push ghcr.io/${{ github.repository }}/order-service:latest
          docker push ghcr.io/${{ github.repository }}/stock-service:latest

  # Test
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start Test Containers
        run: docker-compose -f docker-compose.test.yml up -d

      - name: Run Order Service Tests
        run: mvn -f order-service/pom.xml test

      - name: Run Stock Service Tests
        run: mvn -f stock-service/pom.xml test

      - name: Stop Test Containers
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  # Deploy
  deploy:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ env.CI_REGISTRY_PASSWORD }}" | docker login ghcr.io -u "${{ env.CI_REGISTRY_USER }}" --password-stdin

      - name: Pull & Verify Docker Images
        run: |
          docker pull ghcr.io/${{ github.repository }}/order-service:latest
          docker pull ghcr.io/${{ github.repository }}/stock-service:latest
          docker images

      - name: Start Services with Docker Compose
        run: docker-compose -f docker-compose.yml up -d
